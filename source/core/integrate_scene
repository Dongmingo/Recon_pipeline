"""
 Integrate scene: integrate RGB-D images to generate a mesh model for the scene.
 This part uses RGBD integration.
"""

import os

import numpy as np
import open3d as o3d


def scalable_integrate_rgb_frames(data_dict, config):
    intrinsic = config['intrinsic']
    depth_scale = config['depth_scale']
    n_fragments = config['n_fragments']
    poses = []
    volume = o3d.pipelines.integration.ScalableTSDFVolume(
        voxel_length=config["tsdf_cubic_size"] / 512.0,
        sdf_trunc=0.04,
        color_type=o3d.pipelines.integration.TSDFVolumeColorType.RGB8)

    pose_graph_fragment = o3d.io.read_pose_graph(
        os.path.join(data_dict['template_refined_posegraph']))

    for fragment_id in range(len(pose_graph_fragment.nodes)):
        pose_graph_rgbd = o3d.io.read_pose_graph(
            os.path.join(data_dict["template_fragment_posegraph_optimized"] % fragment_id))

        for frame_id in range(len(pose_graph_rgbd.nodes)):
            frame_id_abs = fragment_id * \
                    config['n_frames_per_fragment'] + frame_id
            print(
                "Fragment %03d / %03d :: integrate rgbd frame %d (%d of %d)." %
                (fragment_id, n_fragments - 1, frame_id_abs, frame_id + 1,
                 len(pose_graph_rgbd.nodes)))
            rgbd = o3d.geometry.RGBDImage.create_from_color_and_depth(
                                        o3d.io.read_image[data_dict['color'][frame_id_abs]],
                                        o3d.io.read_image[data_dict['depth'][frame_id_abs]],
                                        depth_scale = depth_scale,
                                        convert_rgb_to_intensity=False)
            pose = np.dot(pose_graph_fragment.nodes[fragment_id].pose,
                          pose_graph_rgbd.nodes[frame_id].pose)
            volume.integrate(rgbd, intrinsic, np.linalg.inv(pose))
            poses.append(pose)
            
    return volume
        